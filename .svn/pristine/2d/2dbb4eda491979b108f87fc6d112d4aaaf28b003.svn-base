<?php
/**
 * 单聊消息处理
 */
namespace App\Http\Controllers;

use App\Exceptions\InvalidRequestException;
use App\Http\Resources\GroupMessageResourceCollection;
use App\Http\Resources\MessageQueueResourceCollection;
use App\Http\Resources\MessageResourceCollection;
use App\Models\File;
use App\Models\Group;
use App\Models\GroupMessage;
use App\Models\GroupUser;
use App\Models\Message;
use App\Models\MessageQueue;
use App\Models\User;
use Illuminate\Http\Request;
use Auth;
use Validator;
use DB;

class MessageController extends BaseController
{

    /**
     * 获取消息队列列表
     * $uid 当前登录的用户ID
     */
    public function getQueueList()
    {
        $messageQueue = new MessageQueue();
        //获取当前登录用户的所有群消息队列
        $group = $messageQueue->getGroupList(Auth::id(),'group');
        $group_queue = $messageQueue->where(['type'=>'group','user_id'=>Auth::id()])->whereIn('from_id',$group)->orderBy('updated_at','desc')->get()->toArray();
        //获取当前登录用户的所有私聊消息队列
        $user_queue = MessageQueue::where(['user_id'=>Auth::id(),'type'=>'user'])->with('user')->orderBy('updated_at','desc')->get()->toArray();
        return array_merge($group_queue,$user_queue);
    }

    /**
     *根据群ID获取当前群下所有消息
     */
    public function getGroupMessageList(Request $request)
    {
        $messageQueue = new MessageQueue();
        $group_id = $request->input('group_id');
        $type    = $request->input('type');
        $uid = Auth::id();
        $messageQueue->updateQueueReadNum($uid,$group_id,$type);
        $join_group_time = GroupUser::where(['group_id'=>$group_id,'user_id'=>$uid])->get(['created_at'])->toArray();
        return new GroupMessageResourceCollection(GroupMessage::where([['group_id','=',$group_id],['created_at','>=',$join_group_time]])->orderBy('updated_at','desc')->paginate(30));
    }

    /**
     * $user_id 私聊用户ID
     * $uid     当前登录用户的ID
     * @return MessageResourceCollection
     */
    public function getUserMessageList(Request $request)
    {
        $messageQueue = new MessageQueue();
        $user_id = $request->input('user_id');
        $type    = $request->input('type');
        $uid = Auth::id();
        $messageQueue->updateQueueReadNum($uid,$user_id,$type);
        return new MessageResourceCollection(Message::whereIn('user_id',[$uid,$user_id])->whereIn('to_user_id',[$uid,$user_id])->orderBy('updated_at','desc')->paginate(30));
    }

    /**
     *发送群消息
     * $send_id  发送人ID
     * $group_id 群ID
     * $content 消息内容
     */
    public function sendGroupMessage(Request $request)
    {
        $groupMessage  = new GroupMessage();
        $messageQueue = new MessageQueue();
        $user_id = Auth::id();
        $group_id = $request->input('group_id');
        $content = strip_tags($request->input('content'),'<img>');
        $type = $request->input('type');
        $group = Group::findOrFail($group_id);
        $uid_arr = $group->users->pluck('id')->toArray();
        $username = Auth::user()->name;
        $avatar   = Auth::user()->avatar;
        if(!in_array($user_id,$uid_arr))
        {
            throw new InvalidRequestException('你不在该群，不能发送消息',3002,400);
        }
        $data = [
            'user_name' => $username,
            'headimg' => avatar($avatar),
            'content' => $content,
            'file_id' => '',
            'file_name' =>'',
            'file_size' => '',
            'file_url' => '',
            'file_type' => ''
        ];
        $contents = json_encode($data);
        $groupMessage->user_id  = $user_id;
        $groupMessage->group_id = $group_id;
        $groupMessage->content  = $contents;
        $groupMessage->save();
        //推送数据封装
        $send_data = [
            'type'     => 'group',
            'msg_id'   => $groupMessage->id,
            'user_id'  => $user_id,
            'group_id' => $group_id,
            'group_name' => $group->name,
            'content'  => $data,
            'updated_at' => date('Y-m-d H:i:s',time()),
        ];
        //添加消息队列
        $messageQueue->saveGroupQueue($user_id,$group_id,$group->name,$contents,$type);
        //推送消息
        $this->sendToGroup($group->group_name,$send_data);
        return response()->json($send_data);
    }


    /**
     *发送私聊消息
     */
    public function sendPrivateMessage(Request $request)
    {
        $message  = new Message();
        $messageQueue = new MessageQueue();
        $user_id  = Auth::id();
        $to_user_id = $request->input('to_user_id');
        $content  = strip_tags($request->input('content'),'<img>');
        $type     = $request->input('type');
        $username = Auth::user()->name;
        $avatar   = Auth::user()->avatar;
        $data = [
            'user_name' => $username,
            'headimg' => avatar($avatar),
            'content' => $content,
            'file_id' => '',
            'file_name' =>'',
            'file_size' => '',
            'file_url' => '',
            'file_type' => ''
        ];
        $contents  = json_encode($data);
        $message->user_id  = $user_id;
        $message->to_user_id = $to_user_id;
        $message->content  = $contents;
        $message->save();
        //推送数据封装
        $send_data = [
            'type'     => $type,
            'user_id'  => $user_id,
            'to_user_id' => $to_user_id,
            'content'  => $data,
            'updated_at' => date('Y-m-d H:i:s',time()),
            'msg_id'   => $message->id
        ];
        $user = User::findOrFail($to_user_id);
        //添加消息队列
        $messageQueue->saveUserQueue($user_id,$to_user_id,$user->name,$contents,$type);
        //推送消息
        $this->sendToUid([$to_user_id,$user_id],$send_data);
        return response()->json($send_data);
    }

    /**
     * 删除指定消息队列
     * $user_id 当前登录用户ID
     * $type 类型:群group， 用户user
     * $from_id  聊天对象的ID
     */
    public function delQueue(Request $request)
    {
        $user_id  = Auth::id();
        $from_id = $request->input('from_id');
        $type     = $request->input('type');
        return  MessageQueue::where(['user_id'=>$user_id,'from_id'=>$from_id,'type'=>$type])->delete();
    }

    /**
     * 私聊消息撤回
     * $msg_id 消息ID
     * $user_id 发送人ID
     * $to_user_id 接收人ID
     */
    public function userWithdraw(Request $request)
    {
        $message  = new Message();
        $messageQueue = new MessageQueue();
        $msg_id     = $request->input('msg_id');
        $type       = $request->input('type');
        $to_user_id = $request->input('to_user_id');
        $user_id    = Auth::id();
        $user = User::findOrFail($to_user_id);
        $username = Auth::user()->name;
        $avatar   = Auth::user()->avatar;
        if($res = Message::where(['id'=> $msg_id])->first())
        {
          $content = json_decode($res->content,true);
          if(!empty($content['file_id']))
          {
             $file = File::find($content['file_id']);
             unlink(public_path($file->url));
             $file->delete();
          }
        }
        if(Message::where(['id'=>$msg_id])->delete())
        {
            $data = [
                'user_name' => $username,
                'headimg' => avatar($avatar),
                'content' => $username .'撤回了一条消息',
                'tips'    => 1,
                'file_id' => '',
                'file_name' =>'',
                'file_size' => '',
                'file_url' => '',
                'file_type' => ''
            ];
            $contents  = json_encode($data);
            $message->user_id  = $user_id;
            $message->to_user_id = $to_user_id;
            $message->content  = $contents;
            $message->save();
            $messageQueue->saveUserQueue($user_id,$to_user_id,$user->name,$contents,$type);
            //修改队列
            //推送数据封装
            $send_data = [
                'type'     => 'user',
                'msg_id'   => $msg_id,
                'user_id'  => $user_id,
                'to_user_id' => $to_user_id,
                'content'  => $data,
                'updated_at' => date('Y-m-d H:i:s',time())
            ];
            $this->sendToUid([$to_user_id,$user_id],$send_data);
            return response()->json($send_data);
        }
    }

    /**
     *群消息撤回
     * $msg_id 消息ID
     * $user_id 发送人ID
     * $group_id 当前群ID
     */
    public function groupWithdraw(Request $request)
    {
        $messageQueue = new MessageQueue();
        $groupMessage  = new GroupMessage();
        $msg_id     = $request->input('msg_id');
        $type       = $request->input('type');
        $group_id = $request->input('group_id');
        $group = Group::findOrFail($group_id);
        $uid_arr = $group->users->pluck('id')->toArray();
        $user_id  = Auth::id();
        $username = Auth::user()->name;
        $avatar   = Auth::user()->avatar;

        if($res = GroupMessage::where(['id'=> $msg_id])->first())
        {
            $content = json_decode($res->content,true);
            if(!empty($content['file_id']))
            {
                $file = File::find($content['file_id']);
                unlink(public_path($file->url));
                $file->delete();
            }
        }
        if(!in_array($user_id,$uid_arr))
        {
            throw new InvalidRequestException('你已不在该群，不能撤回消息',3002,400);
        }
        if(GroupMessage::where(['id'=>$msg_id])->delete())
        {
            $data = [
                'user_name' => $username,
                'headimg' => avatar($avatar),
                'content' => $username."撤回了一条消息",
                'tips'    => 1,
                'file_id' => '',
                'file_name' =>'',
                'file_size' => '',
                'file_url' => '',
                'file_type' => ''
            ];
            $contents = json_encode($data);
            $groupMessage->user_id  = $user_id;
            $groupMessage->group_id = $group_id;
            $groupMessage->content  = $contents;
            $groupMessage->save();
            //推送数据封装
            $send_data = [
                'type'     => 'group',
                'msg_id'   => $msg_id,
                'user_id'  => $user_id,
                'group_id' => $group_id,
                'group_name' => $group->name,
                'content'  => $data,
                'updated_at' => date('Y-m-d H:i:s',time()),
            ];
            //添加消息队列
            $messageQueue->saveGroupQueue($user_id,$group_id,$group->name,$contents,$type);
            //推送消息
            $this->sendToGroup($group->group_name,$send_data);
            return response()->json($send_data);
        }else{
            throw new InvalidRequestException('撤回消息失败',3003,400);
        }

    }

    /**
     * 消息转发
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws InvalidRequestException
     */
    public function forwardMessage(Request $request){
        $validator = Validator::make($request->all(), [
            'id' => 'required|integer',
            'type' => 'required',
            'to' => 'required',
        ]);

        if ($validator->fails()) {
            throw new InvalidRequestException('参数不正确', 310003, 401);
        }

        $id = $request->id;     //消息ID
        $type = $request->type; //消息类型
        $to = $request->to;     //转发的对象
        if (!in_array($type, ['group', 'user'])){
            throw new InvalidRequestException('没有这个类型', 310001, 401);
        }
        if ($type == 'group'){
            $message = GroupMessage::find($id);
        }else{
            $message = Message::find($id);
        }
        if (!$message){
            throw new InvalidRequestException('消息不存在', 310002, 401);
        }
        $content = json_decode($message->content, true);
        $content['user_name'] = Auth::user()->name;
        $content['headimg'] = avatar(Auth::user()->avatar);

        $file_id = $content['file_id']; //如果转发的是文件
        $file_data = [];
        if ($file_id){
            $file = File::find($file_id);
            if ($file){
                $file_data = [
                    'name' => $file->name,
                    'type' => $file->type,
                    'size' => $file->size,
                    'url' => $file->url,
                ];
            }else{
                throw new InvalidRequestException('文件已删除', 310009, 401);
            }
        }

        $toArr = explode(',', $to);

        $user_id = Auth::user()->id;

        $messageQueue = new MessageQueue();

        $return = [];
        foreach ($toArr as $item){
            if (preg_match('/^(group|user)_(\d+)$/', $item, $m)){
                $to_type = $m[1];
                $to_id = $m[2];
                if ($to_type == 'user'){

                    $user = User::find($to_id);

                    if ($user){
                        DB::transaction(function() use ($messageQueue, $user_id, $to_id, $user,$content,$file_data){

                            if (count($file_data)){ //如果是文件消息
                                $insert_file = File::create([
                                    'user_id' =>$user_id,
                                    'to_user_id' => $to_id,
                                    'name' =>$file_data['name'],
                                    'type' => $file_data['type'],
                                    'size' => $file_data['size'],
                                    'url' => $file_data['url'],
                                ]);
                                $content['file_id'] = $insert_file->id;
                                $insert = [
                                    'user_id' => $user_id,
                                    'to_user_id' => $to_id,
                                    'content' => json_encode($content),
                                ];
                            }else{
                                $insert = [
                                    'user_id' => $user_id,
                                    'to_user_id' => $to_id,
                                    'content' => json_encode($content),
                                ];
                            }

                            $message = Message::create($insert);
                            $messageQueue->saveUserQueue($user_id, $to_id, $user->name, $insert['content'],'user');

                            $send_data = [
                                'type'     => 'user',
                                'user_id'  => $user_id,
                                'to_user_id' => $to_id,
                                'content'  => $content,
                                'updated_at' => date('Y-m-d H:i:s',time()),
                                'msg_id'   => $message->id,
                                'time' => date('H:i'),
                            ];
                            if ($message->id){
                                $this->sendToUid([$to_id,$user_id], $send_data);
                            }

                        });

                        //获取接收者对发送者最新的一条消息
                        //获取接收者用户名，头像
                        //获取的目的是为了在消息队列里显示
                        $user_message = Message::where('user_id',$to_id)->where('to_user_id',$user_id)->orderBy('created_at','desc')->first();
                        if ($user_message){
                            $return_data=[
                                'type' => 'user',
                                'user_id' => $to_id,
                                'to_user_id' => $user_id,
                                'content' => json_decode($user_message->content,true),
                                'time' => date('H:i'),
                                'updated_at' => date('Y-m-d H:i:s',time()),
                            ];
                        }else{
                            $return_data=[
                                'type' => 'user',
                                'user_id' => $to_id,
                                'to_user_id' => $user_id,
                                'content' => ['user_name'=>$user->name,'headimg'=>$user->avatar,'content'=>'','file_id'=>'','file_name'=>'','file_size'=>'','file_url'=>'','file_type'=>''],
                                'time' => date('H:i'),
                                'updated_at' => date('Y-m-d H:i:s',time()),
                            ];
                        }
                    }


                }else{

                    $group = Group::find($to_id);

                    $send_data = [
                        'type'     => 'group',
                        'user_id'  => $user_id,
                        'group_id' => $to_id,
                        'group_name' => $group->name,
                        'content'  => $content,
                        'updated_at' => date('Y-m-d H:i:s',time()),
                        'time' => date('H:i'),
                    ];
                    $return_data = $send_data;

                    if ($group){

                        DB::transaction(function() use ($messageQueue, $user_id, $to_id, $group,$content,$send_data,$file_data){

                            if (count($file_data)) { //如果是文件消息
                                $insert_file = File::create([
                                    'user_id' =>$user_id,
                                    'group_id' => $to_id,
                                    'name' =>$file_data['name'],
                                    'type' => $file_data['type'],
                                    'size' => $file_data['size'],
                                    'url' => $file_data['url'],
                                ]);
                                $content['file_id'] = $insert_file->id;
                                $insert = [
                                    'group_id' => $to_id,
                                    'user_id' => $user_id,
                                    'content' => json_encode($content),
                                ];
                            }else{
                                $insert = [
                                    'group_id' => $to_id,
                                    'user_id' => $user_id,
                                    'content' => json_encode($content),
                                ];
                            }

                            $message = GroupMessage::create($insert);
                            $messageQueue->saveGroupQueue($user_id,$to_id,$group->name,$insert['content'],'group');
                            $send_data['msg_id'] = $message->id;
                            if ($message->id){
                                $this->sendToGroup($group->group_name,$send_data);
                            }
                        });

                    }

                }
            }
            $return[] = $return_data;
            //sleep(1);
        }
        return response()->json($return, 200);
    }


}
