<?php
/**
 * 单聊消息处理
 */
namespace App\Http\Controllers;

use App\Exceptions\InvalidRequestException;
use App\Http\Resources\GroupMessageResourceCollection;
use App\Http\Resources\MessageQueueResourceCollection;
use App\Http\Resources\MessageResourceCollection;
use App\Models\Group;
use App\Models\GroupMessage;
use App\Models\Message;
use App\Models\MessageQueue;
use App\Models\User;
use Illuminate\Http\Request;
use Auth;

class MessageController extends BaseController
{

    /**
     * 获取消息队列列表
     * $uid 当前登录的用户ID
     */
    public function getQueueList()
    {
        return new MessageQueueResourceCollection(MessageQueue::where('user_id',Auth::id())->get());
    }

    /**
     *根据群ID获取当前群下所有消息
     */
    public function getGroupMessageList(Request $request)
    {
        $group_id = $request->input('group_id');
        $type    = $request->input('type');
        $uid = Auth::id();
        $this->updateQueueReadNum($uid,$group_id,$type);
        return new GroupMessageResourceCollection(GroupMessage::where('group_id',$group_id)->get());
    }

    /**
     * $user_id 私聊用户ID
     * $uid     当前登录用户的ID
     * @return MessageResourceCollection
     */
    public function getUserMessageList(Request $request)
    {
        $user_id = $request->input('user_id');
        $type    = $request->input('type');
        $uid = Auth::id();
        $this->updateQueueReadNum($uid,$user_id,$type);
        return new MessageResourceCollection(Message::whereIn('user_id',[$user_id,$uid])->get());
    }

    /**
     *发送群消息
     * $send_id  发送人ID
     * $group_id 群ID
     * $content 消息内容
     */
    public function sendGroupMessage(Request $request)
    {
        $groupMessage  = new GroupMessage();
        $user_id = Auth::id();
        $group_id = $request->input('group_id');
        $content = $request->input('content');
        $type = $request->input('type');
        $group = Group::findOrFail($group_id);
        $uid_arr = $group->users->pluck('id')->toArray();
        if(!in_array($user_id,$uid_arr))
        {
            throw new InvalidRequestException('你不在该群，不能发送消息',3002,400);
        }
        $data = [
            'user_name' => Auth::user()->name,
            'headimg' => Auth::user()->avatar,
            'content' => $content,
            'file_id' => '',
            'file_size' => '',
            'file_url' => '',
            'file_type' => ''
        ];
        $contents = json_encode($data);
        $groupMessage->user_id  = $user_id;
        $groupMessage->group_id = $group_id;
        $groupMessage->content  = $contents;
        $groupMessage->save();
        //推送数据封装
        $send_data = [
            'type'     => 'group',
            'user_id'  => $user_id,
            'group_id' => $group_id,
            'content'  => $data
        ];
        //添加消息队列
        $this->saveQueue($user_id,$group_id,$group->name,$contents,$type);
        //推送消息
        $this->sendToGroup($group->group_name,$send_data);
        return response()->json($send_data);
    }

    /**
     * 群消息撤回
     *
     */
    public function groupWithdraw()
    {

    }


    /**
     *发送私聊消息
     */
    public function sendPrivateMessage(Request $request)
    {
        $message  = new Message();
        $user_id  = Auth::id();
        $to_user_id = $request->input('to_user_id');
        $content  = $request->input('content');
        $type     = $request->input('type');
        $username = Auth::user()->username;
        $avatar   = Auth::user()->avatar;
        $data = [
            'user_name' => $username,
            'headimg' => $avatar,
            'content' => $content,
            'file_id' => '',
            'file_size' => '',
            'file_url' => '',
            'file_type' => ''
        ];
        $contents  = json_encode($data);
        $message->user_id  = $user_id;
        $message->to_user_id = $to_user_id;
        $message->content  = $contents;
        $message->save();
        //推送数据封装
        $send_data = [
            'type'     => $type,
            'to_user_id' => $to_user_id,
            'content'  => $contents,
            'msg_id'   => $message->id
        ];
        $user = User::findOrFail($to_user_id);
        //添加消息队列
        $this->saveQueue($user_id,$to_user_id,$user->name,$contents,$type);
        //推送消息
        $this->sendToUid([$to_user_id],$send_data);
        return response()->json($send_data);
    }

    /**
     * 私聊消息撤回
     */
    public function privateWithdraw()
    {

    }

    /**
     * save queue
     * $uid     接收消息用户ID
     * $content 发送休息内容
     * $form_id 发送人获取群ID
     * $name    发送人名称或群名称
     * $type    消息类型：group 群,user 私聊
     */
    public function saveQueue($uid,$from_id,$name,$content,$type)
    {
        $res = MessageQueue::where(['user_id'=>$uid,'from_id'=>$from_id,'type' =>$type])->first();
        if(!$res)
        {
            $data['user_id'] = $uid;
            $data['content'] = $content;
            $data['from_id'] = $from_id;
            $data['name']    = $name;
            $data['type']    = $type;
            $data['unread']   = 1;
            $data['created_at'] = date('Y-m-d H:i:s');
            MessageQueue::insert($data);
        }else{
            $data['content'] = $content;
            $data['unread']  = $res->unread + 1;
            MessageQueue::where(['user_id'=>$uid,'from_id'=>$from_id,'type' =>$type])->update($data);
        }
    }

    /**
     * 修改消息队列未读数量
     */

    public function updateQueueReadNum($user_id,$from_id,$type)
    {
        MessageQueue::where(['user_id'=>$user_id,'from_id'=>$from_id,'type' =>$type])->update(['unread' => 0]);
    }

}
